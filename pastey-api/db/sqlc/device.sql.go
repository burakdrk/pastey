// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: device.sql

package db

import (
	"context"
	"database/sql"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (user_id, device_name, public_key)
VALUES ($1, $2, $3)
RETURNING id, user_id, device_name, public_key, created_at
`

type CreateDeviceParams struct {
	UserID     int64  `json:"user_id"`
	DeviceName string `json:"device_name"`
	PublicKey  string `json:"public_key"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, createDevice, arg.UserID, arg.DeviceName, arg.PublicKey)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceName,
		&i.PublicKey,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const getDeviceById = `-- name: GetDeviceById :one
SELECT id, user_id, device_name, public_key, created_at
FROM devices
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDeviceById(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceById, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceName,
		&i.PublicKey,
		&i.CreatedAt,
	)
	return i, err
}

const listUserDevices = `-- name: ListUserDevices :many
SELECT id, user_id, device_name, public_key, created_at
FROM devices
WHERE user_id = $1
`

func (q *Queries) ListUserDevices(ctx context.Context, userID int64) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listUserDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceName,
			&i.PublicKey,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET
    device_name = COALESCE($1, device_name),
    public_key = COALESCE($2, public_key)
WHERE
    id = $3
RETURNING id, user_id, device_name, public_key, created_at
`

type UpdateDeviceParams struct {
	DeviceName sql.NullString `json:"device_name"`
	PublicKey  sql.NullString `json:"public_key"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, updateDevice, arg.DeviceName, arg.PublicKey, arg.ID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceName,
		&i.PublicKey,
		&i.CreatedAt,
	)
	return i, err
}
