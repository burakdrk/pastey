// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entry.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO clipboard_entries (entry_id, user_id, from_device_id, to_device_id, encrypted_data, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, entry_id, user_id, from_device_id, to_device_id, encrypted_data, created_at
`

type CreateEntryParams struct {
	EntryID       uuid.UUID `json:"entry_id"`
	UserID        int64     `json:"user_id"`
	FromDeviceID  int64     `json:"from_device_id"`
	ToDeviceID    int64     `json:"to_device_id"`
	EncryptedData string    `json:"encrypted_data"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (ClipboardEntry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.EntryID,
		arg.UserID,
		arg.FromDeviceID,
		arg.ToDeviceID,
		arg.EncryptedData,
		arg.CreatedAt,
	)
	var i ClipboardEntry
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.FromDeviceID,
		&i.ToDeviceID,
		&i.EncryptedData,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM clipboard_entries
WHERE entry_id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, entryID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, entryID)
	return err
}

const getEntriesForDevice = `-- name: GetEntriesForDevice :many
SELECT c.id, c.entry_id, c.user_id, c.from_device_id, c.to_device_id, c.encrypted_data, c.created_at, d.device_name as from_device_name
FROM clipboard_entries c
JOIN devices d ON c.from_device_id = d.id
WHERE c.to_device_id = $1
ORDER BY c.created_at DESC
`

type GetEntriesForDeviceRow struct {
	ID             int64     `json:"id"`
	EntryID        uuid.UUID `json:"entry_id"`
	UserID         int64     `json:"user_id"`
	FromDeviceID   int64     `json:"from_device_id"`
	ToDeviceID     int64     `json:"to_device_id"`
	EncryptedData  string    `json:"encrypted_data"`
	CreatedAt      time.Time `json:"created_at"`
	FromDeviceName string    `json:"from_device_name"`
}

func (q *Queries) GetEntriesForDevice(ctx context.Context, toDeviceID int64) ([]GetEntriesForDeviceRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesForDevice, toDeviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntriesForDeviceRow{}
	for rows.Next() {
		var i GetEntriesForDeviceRow
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.UserID,
			&i.FromDeviceID,
			&i.ToDeviceID,
			&i.EncryptedData,
			&i.CreatedAt,
			&i.FromDeviceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByEntryId = `-- name: GetEntryByEntryId :many
SELECT id, entry_id, user_id, from_device_id, to_device_id, encrypted_data, created_at
FROM clipboard_entries
WHERE entry_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEntryByEntryId(ctx context.Context, entryID uuid.UUID) ([]ClipboardEntry, error) {
	rows, err := q.db.QueryContext(ctx, getEntryByEntryId, entryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClipboardEntry{}
	for rows.Next() {
		var i ClipboardEntry
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.UserID,
			&i.FromDeviceID,
			&i.ToDeviceID,
			&i.EncryptedData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByUser = `-- name: GetEntryByUser :many
SELECT id, entry_id, user_id, from_device_id, to_device_id, encrypted_data, created_at
FROM clipboard_entries
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEntryByUser(ctx context.Context, userID int64) ([]ClipboardEntry, error) {
	rows, err := q.db.QueryContext(ctx, getEntryByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClipboardEntry{}
	for rows.Next() {
		var i ClipboardEntry
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.UserID,
			&i.FromDeviceID,
			&i.ToDeviceID,
			&i.EncryptedData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByUserForUpdate = `-- name: GetEntryByUserForUpdate :many
SELECT id, entry_id, user_id, from_device_id, to_device_id, encrypted_data, created_at
FROM clipboard_entries
WHERE user_id = $1
ORDER BY created_at DESC
FOR NO KEY UPDATE
`

func (q *Queries) GetEntryByUserForUpdate(ctx context.Context, userID int64) ([]ClipboardEntry, error) {
	rows, err := q.db.QueryContext(ctx, getEntryByUserForUpdate, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClipboardEntry{}
	for rows.Next() {
		var i ClipboardEntry
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.UserID,
			&i.FromDeviceID,
			&i.ToDeviceID,
			&i.EncryptedData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
