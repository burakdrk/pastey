name: Deploy to OCI

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    name: Build image
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: pastey-api

    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Load secrets from AWS
        run: aws secretsmanager get-secret-value --secret-id pastey --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env
      
      - name: Get or create an OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: pastey
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.2.1
        id: login-ocir
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      # - name: Build, tag, and push docker image to OCIR
      #   env:
      #     REPOSITORY: ${{ steps.get-ocir-repository.outputs.repo_path }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker buildx build --output type=docker --platform linux/arm64 -t "$REPOSITORY:$IMAGE_TAG" .
      #     docker push "$REPOSITORY:$IMAGE_TAG"

      - name: Retrieve the OCID of th current instance
        uses: oracle-actions/run-oci-cli-command@v1.2.0
        id: find-current-instance
        with:
          command: 'container-instances container-instance list -c ${{ secrets.OCI_COMPARTMENT_OCID }}'
          query: "data.items[?\"lifecycle-state\"=='ACTIVE'].id"

      - name: Print
        run: |
          echo ${{ steps.find-current-instance.outputs.output }} | jq .
  

      # - name: Delete the current instance
      #   uses: oracle-actions/run-oci-cli-command@v1.2.0
      #   with:
      #     command: 'container-instances container-instance delete --container-instance-id ${{ steps.find-current-instance.outputs.output.id }}'

      # - name: Create a new instance
      #   uses: oracle-actions/run-oci-cli-command@v1.2.0
      #   with:
      #     command: 'container-instances container-instance create --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name pastey --subnet-id ${{ secrets.OCI_SUBNET_OCID }} --image "$REPOSITORY:$IMAGE_TAG" --shape VM.Standard.E3.Flex --assign-public-ip true'
